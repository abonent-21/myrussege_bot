import logging
from telegram.ext import Application, MessageHandler, filters
from telegram.ext import CommandHandler, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ConversationHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
import random
import asyncio
import sqlite3
import json

conn = sqlite3.connect('data.db', check_same_thread=False)
cursor = conn.cursor()


def show_count_of_type_task(type_task: int):
    with open(f'task_{type_task}.json', encoding='UTF-8') as file:
        return len(json.load(file))


with open('users.json', 'r') as file:
    USERS = json.load(file)
print(USERS)
type_of_tasks = [9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21]
TYPE_OF_DATA_USERS = {'type_menu': '',
                      'current_num_accent_word': 0,
                      'current_menu_of_accents': [],
                      'current_task_1': 0,
                      'current_task_2': 0,
                      'current_task_3': 0,
                      'current_task_5': 0,
                      'current_task_6': 0,
                      'current_task_9': 0,
                      'current_task_10': 0,
                      'current_task_11': 0,
                      'current_task_12': 0,
                      'current_task_15': 0,
                      'current_task_16': 0,
                      'current_task_17': 0,
                      'current_task_18': 0,
                      'current_task_19': 0,
                      'current_task_20': 0,
                      'current_task_21': 0,
                      'tasks_complited': [],
                      'score': 0}

ACCENTS = []
with open('accents.txt', mode='r', encoding='UTF-8') as file:
    for i in file:
        item = i.split()[0]
        if not item[-1].isalpha() and item[-1] != ')':
            item = item[:-1]
        ACCENTS.append(item)
all_commands = ['–£–¥–∞—Ä–µ–Ω–∏—è', '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è', '–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è', '–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤', '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–æ –±–æ—Ç–µ', '–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
grammar_commands = ['–ó–∞–¥–∞–Ω–∏–µ 9', '–ó–∞–¥–∞–Ω–∏–µ 10', '–ó–∞–¥–∞–Ω–∏–µ 11', '–ó–∞–¥–∞–Ω–∏–µ 12', '–ó–∞–¥–∞–Ω–∏–µ 15',
                    '–ó–∞–¥–∞–Ω–∏–µ 16', '–ó–∞–¥–∞–Ω–∏–µ 17', '–ó–∞–¥–∞–Ω–∏–µ 18', '–ó–∞–¥–∞–Ω–∏–µ 19', '–ó–∞–¥–∞–Ω–∏–µ 20', '–ó–∞–¥–∞–Ω–∏–µ 21']

UPDATE_INFO = """
poit - –±–∞–ª–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ –≤–µ—Ä–Ω–æ —Ä–µ—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É.

–ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:
1) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞.
2) –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ –ª–∏–¥–µ—Ä–æ–≤.
3) –ó–∞ –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞—Ä–µ–Ω–∏–µ 1 –ø–æ–∏–Ω—Ç, –∑–∞ –∑–∞–¥–∞—á—É –≤ –±–ª–æ–∫–∞—Ö –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –ø–æ 20 –ø–æ–∏–Ω—Ç–æ–≤.

–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –∏–ª–∏ –¥–æ–±–∞–ª–µ–Ω–Ω—ã–º:
1) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á. –°–µ–π—á–∞—Å –≤ –±–ª–æ–∫–µ —É–¥–∞—Ä–µ–Ω–∏–π –≤—Å–µ —Å–ª–æ–≤–∞, –Ω–æ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–∞—Ö –ø–æ 10 —à—Ç—É–∫.
2) –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–∞—Ä–æ–Ω–∏–º—ã + 1-3 –∑–∞–¥–∞—á–∏.

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–∏—à–∏—Ç–µ –º–Ω–µ ---> @G30rG32

<i><b>–ú–æ–∂–Ω–æ –µ—â–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞ —à–ª–∞ –ø–æ–±—ã—Å—Ç—Ä–µ–µ</b></i> üòÅ:
–°–±–µ—Ä–±–∞–Ω–∫ ---> 5469720013481755 (–ì–µ–æ—Ä–≥–∏–π –ö–æ–∑–ª–æ–≤)
"""


async def echo(update, context):
    print(update.message.from_user.first_name)
    user_id = str(update.message.from_user.id)
    with open('users.json', 'w+') as file:
        json.dump(USERS, file)
    if user_id not in USERS:
        return await update.message.reply_html(
            '–ë–æ—Ç ü§ñ –±—ã–ª –≤ —Ä–µ–º–æ–Ω—Ç–µ (–∏–ª–∏ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç) –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω—ã.\n'
            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç–æ ----> /start , —á—Ç–æ–±—ã –ø—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ')
    type_menu = USERS[user_id]['type_menu']
    message = update.message.text
    if message in all_commands + grammar_commands or message == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        USERS[user_id]['type_menu'] = message
        type_menu = message
    if type_menu == '–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤':
        await create_list_of_leaders(update)
    if type_menu == '–£–¥–∞—Ä–µ–Ω–∏—è':
        await accent_menu(update, message)
    if type_menu == '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await update.message.reply_html('–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', reply_markup=menu_of_add_info())
    if type_menu == '–æ –±–æ—Ç–µ':
        await update.message.reply_html(UPDATE_INFO, reply_markup=menu_of_add_info())
    if type_menu == '–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await stat_info(update)
    if type_menu == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_keyboard())
    if type_menu == '–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è':
        await update.message.reply_text('–ë–ª–æ–∫ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏:', reply_markup=menu_of_grammar())
    if type_menu == '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è':
        await update.message.reply_text('–ë–ª–æ–∫ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏:', reply_markup=menu_of_punctuation())
    if type_menu in grammar_commands and message in grammar_commands:
        await create_task(update, type_task=type_menu)
    if type_menu in grammar_commands and message not in grammar_commands:
        await check_the_correct_answer(update, type_task=type_menu)


def menu_of_add_info():
    keyboard = [['–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'], ['–æ –±–æ—Ç–µ'], ['–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    return markup


async def stat_info(user):
    user_id = str(user.message.from_user.id)
    result = ''
    result += f'–†–µ—à–µ–Ω–æ  <i><b>{USERS[user_id]["current_num_accent_word"]}</b></i>' \
              f' —É–¥–∞—Ä–µ–Ω–∏–π –∏–∑ <i><b>279</b></i>\n'
    for num_tsk in type_of_tasks:
        score = USERS[user_id][f"current_task_{num_tsk}"]
        if str(num_tsk) in USERS[user_id]['tasks_complited']:
            score = show_count_of_type_task(type_task=num_tsk)
        result += f'–†–µ—à–µ–Ω–æ ‚Ññ{num_tsk} –∑–∞–¥–∞–Ω–∏–π <i><b>{score}</b></i> ' \
                  f'–∏–∑ <i><b>{show_count_of_type_task(type_task=num_tsk)}</b></i>\n'

    await user.message.reply_html(result, reply_markup=menu_of_add_info())


async def create_task(user, type_task):
    user_id = str(user.message.from_user.id)
    num_tsk = type_task.split()[-1]
    with open(f'task_{num_tsk}.json', encoding='UTF-8') as file:
        data = json.load(file)
        await user.message.reply_html(data[USERS[user_id][f'current_task_{num_tsk}']]['task'],
                                      reply_markup=back_to_main_menu())
    await user.message.reply_html('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:')


async def check_the_correct_answer(user, type_task):
    num_tsk = type_task.split()[-1]
    user_answer = user.message.text
    user_id = str(user.message.from_user.id)
    with open(f'task_{num_tsk}.json', encoding='UTF-8') as file:
        data = json.load(file)
    id_of_task = USERS[user_id][f'current_task_{num_tsk}']
    correct_answer = data[id_of_task]['answer'].split('–∏–ª–∏')
    if user_answer in correct_answer:
        if USERS[user_id][f'current_task_{num_tsk}'] + 1 == show_count_of_type_task(int(num_tsk)):
            USERS[user_id]['tasks_complited'].append(num_tsk)
        USERS[user_id][f'current_task_{num_tsk}'] = (USERS[user_id][f'current_task_{num_tsk}'] + 1) % len(data)
        USERS[user_id]['score'] += 20
        await user.message.reply_text('–í–µ—Ä–Ω–æ ‚úÖ', reply_markup=back_to_main_menu())
        await create_task(user, type_task=type_task)
    else:
        USERS[user_id]['type_menu'] = '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        await user.message.reply_text('–û—à–∏–±–∫–∞ ‚ùå', reply_markup=main_menu_keyboard())
        await user.message.reply_html(data[id_of_task]['description'])
        line = ' '.join([i for i in correct_answer])
        await user.message.reply_text(f'–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {line}')
        await message_about_new_record(user)
        USERS[user_id]['score'] = 0


def back_to_main_menu():
    keyboard = [['–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    return markup


async def accent_menu(update, word):
    user_id = str(update.message.from_user.id)
    id_accent_word = USERS[user_id]['current_num_accent_word']
    correct_accent_word = ACCENTS[id_accent_word]
    if word not in all_commands:
        if word == correct_accent_word:
            USERS[user_id]['current_num_accent_word'] = (USERS[user_id]['current_num_accent_word'] + 1) % len(ACCENTS)
            USERS[user_id]['score'] += 1
            await update.message.reply_text('–í–µ—Ä–Ω–æ ‚úÖ', reply_markup=generate_main_accents_menu(user_id))
        else:
            USERS[user_id]['type_menu'] = '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            await update.message.reply_text('–û—à–∏–±–∫–∞ ‚ùå', reply_markup=main_menu_keyboard())
            await update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_accent_word}')
            await message_about_new_record(update)

    else:
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–∞—Ä–µ–Ω–∏–µ:', reply_markup=generate_main_accents_menu(user_id))


def generate_main_accents_menu(user_id):
    menu_of_accents = create_accents_words(user_id=user_id) + [['–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    random.shuffle(menu_of_accents[0])
    USERS[user_id]['current_menu_of_accents'] = menu_of_accents[0]
    markup = ReplyKeyboardMarkup(menu_of_accents, one_time_keyboard=False, resize_keyboard=True)
    return markup


def create_accents_words(user_id):
    id_of_accent_word = USERS[user_id]['current_num_accent_word']
    correct_word = ACCENTS[id_of_accent_word]
    incorrect_word = create_incorrect_word(correct_word)
    line_words = [[correct_word, incorrect_word]]
    return line_words


def create_incorrect_word(correct_word):
    index_correct_word = None
    for i in range(len(correct_word)):
        if correct_word[i].isupper():
            index_correct_word = i
            break
    word_per_letter = list(correct_word.lower())
    index_vowels = []
    for i, j in enumerate(word_per_letter, 0):
        if j == '(':
            break
        if j in '–∞—É–æ—ã–∏—ç—è—é—ë–µ' and i != index_correct_word:
            index_vowels.append(i)
    index = index_vowels[random.randint(0, len(index_vowels) - 1)]
    word_per_letter[index] = word_per_letter[index].upper()
    incorrect_word = ''.join(word_per_letter)
    return incorrect_word


async def start(update, context):
    us_id = str(update.message.from_user.id)
    us_name = update.message.from_user.first_name
    us_sname = update.message.from_user.last_name
    username = update.message.from_user.username
    result = cursor.execute(f'SELECT * FROM user_data WHERE User_id = {us_id}').fetchall()
    user = update.effective_user
    print(user.mention_html())
    if us_id not in USERS:
        USERS[us_id] = TYPE_OF_DATA_USERS
    if len(result) != 0:
        await update.message.reply_html(
            f"{user.mention_html()}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu_keyboard()

        )
    else:
        await update.message.reply_html(
            rf"""–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –µ–≥—ç!""", reply_markup=main_menu_keyboard()
        )
        await db_table_val(user_id=int(us_id), user_name=us_name,
                           user_surname=us_sname, username=username, global_score=0)


async def db_table_val(user_id: int, user_name: str, user_surname: str, username: str, global_score):
    cursor.execute("""INSERT INTO user_data (user_id, user_name, user_surname, username, global_score)
                    VALUES (?, ?, ?, ?, ?)""",
                   (user_id, user_name, user_surname, username, global_score))
    conn.commit()


def main_menu_keyboard():
    main_reply_keyboard = [['–£–¥–∞—Ä–µ–Ω–∏—è', '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è', '–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è'], ['–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤'], ['–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']]
    markup = ReplyKeyboardMarkup(main_reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    return markup


def menu_of_grammar():
    keyboard_of_grammar = [['–ó–∞–¥–∞–Ω–∏–µ 9'],
                           ['–ó–∞–¥–∞–Ω–∏–µ 10'],
                           ['–ó–∞–¥–∞–Ω–∏–µ 11'],
                           ['–ó–∞–¥–∞–Ω–∏–µ 12'],
                           ['–ó–∞–¥–∞–Ω–∏–µ 15'],
                           ['–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(keyboard_of_grammar, one_time_keyboard=False, resize_keyboard=True)
    return markup


def menu_of_punctuation():
    keyboard_of_grammar = [['–ó–∞–¥–∞–Ω–∏–µ 16'],
                           ['–ó–∞–¥–∞–Ω–∏–µ 17'],
                           ['–ó–∞–¥–∞–Ω–∏–µ 18'],
                           ['–ó–∞–¥–∞–Ω–∏–µ 19'],
                           ['–ó–∞–¥–∞–Ω–∏–µ 20'],
                           ['–ó–∞–¥–∞–Ω–∏–µ 21'],
                           ['–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(keyboard_of_grammar, one_time_keyboard=False, resize_keyboard=True)
    return markup


async def message_about_new_record(user):
    user_id = str(user.message.from_user.id)
    global_score = cursor.execute(f'SELECT global_score FROM user_data WHERE User_id = {user_id}').fetchall()[0][0]
    if USERS[user_id]['score'] > global_score:
        us = user.effective_user
        print('score', global_score + USERS[user_id]['score'])
        await user.message.reply_html(
            f"""{us.mention_html()}, —É –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! üéâ 
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—á–µ—Ç: {global_score + USERS[user_id]['score']}""")
        cursor.execute("""UPDATE user_data
                        SET global_score = ?
                        WHERE user_id = ?""",
                       (global_score + USERS[user_id]['score'], user_id))
        conn.commit()
    else:
        await user.message.reply_html(
            f"""–í–∞—à —Å—á–µ—Ç: {USERS[user_id]['score']}
–í–∞—à —Ä–µ–∫–æ—Ä–¥: {global_score}""")
    USERS[user_id]['score'] = 0


async def create_list_of_leaders(user):
    data_users = cursor.execute("""SELECT * FROM user_data ORDER BY global_score""").fetchall()
    list_of_leaders = ''
    counter = 1
    for item in data_users[::-1][:10]:
        user_id = item[1]
        name = item[2]
        score = item[5]
        click_user_name = item[4]
        if not click_user_name:
            list_of_leaders += f'{counter}) <a href="tg://user?id={user_id}">{name}</a> ----> ' \
                               f'{score} points\n'
        else:
            list_of_leaders += f'{counter}) @{click_user_name} ----> {score} points\n'
        counter += 1
    await user.message.reply_html(list_of_leaders, reply_markup=main_menu_keyboard())


BOT_TOKEN = '5926455945:AAFvNA2LPuOmL0EDw3HVJkOJ1H5mOaNgfas'


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, echo)

    application.add_handler(text_handler)
    application.add_handler(CommandHandler("start", start))

    application.run_polling()


if __name__ == '__main__':
    main()
